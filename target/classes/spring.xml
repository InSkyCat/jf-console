<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
	<!-- 自动扫描@Service的类 -->
	<context:component-scan base-package="com.atguigu.jf.console.*.service"></context:component-scan>
	
	<!-- 
		①，映入外部properties文件
		②，配置数据连接池
	 -->
	<context:property-placeholder file-encoding="UTF-8" location="classpath:db.properties"/>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="url" value="${jdbc.url}" />
	</bean>
	
	<!-- 整合mybatis -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- ref需要的参数是一个实例对象，value一般是字符串 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 指定mapper的xml文件的路径，这样就不需要单独的写mybatis的配置文件了，有字符串的使用/分隔 -->
		<property name="mapperLocations" value="classpath:com/atguigu/jf/console/baseapi/*/mapper/*.xml" />
		<!-- 配置分页的PageHelper插件 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							<!-- 必须的两个参数，指定数据库方言 -->
						      dialect=mysql
						      params=pageNum=start;pageSize=limit;
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	<!-- mapper的自动扫描，自动扫描接口文件 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- String类型 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"></property>		
		<property name="basePackage" value="com.atguigu.jf.console.baseapi.*" />
	</bean>
	
	<!-- 整合事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 事务的通知 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
	<tx:attributes>
		<tx:method name="add*" propagation="REQUIRED" />
		<tx:method name="append*" propagation="REQUIRED" />
		<tx:method name="insert*" propagation="REQUIRED" />
		<tx:method name="save*" propagation="REQUIRED" />
		<tx:method name="update*" propagation="REQUIRED" />
		<tx:method name="modify*" propagation="REQUIRED" />
		<tx:method name="edit*" propagation="REQUIRED" />
		<tx:method name="delete*" propagation="REQUIRED" />
		<tx:method name="remove*" propagation="REQUIRED" />
		<tx:method name="repair" propagation="REQUIRED" />
		<tx:method name="delAndRepair" propagation="REQUIRED" />

		<tx:method name="get*" propagation="SUPPORTS" />
		<tx:method name="find*" propagation="SUPPORTS" />
		<tx:method name="load*" propagation="SUPPORTS" />
		<tx:method name="search*" propagation="SUPPORTS" />
		<tx:method name="select*" propagation="SUPPORTS" />
		<tx:method name="Create*" propagation="SUPPORTS"/>

		<tx:method name="*" propagation="SUPPORTS" />

	</tx:attributes>
	</tx:advice>
	
	<!-- 事务的切面 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.atguigu.jf.console.*.service..*Impl.*(..))" id="transactionPointcut"/>
		<aop:advisor advice-ref="transactionAdvice" id="transactionAdvisor" pointcut-ref="transactionPointcut"/>
	</aop:config>
	<!-- quartz配置 -->
	<bean id="jobDetailBean" class="com.atguigu.jf.console.trigger.job.JobDetailBean"></bean>
	
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
	    <property name="targetObject" ref="jobDetailBean" />
	    <property name="targetMethod" value="doIt" />
	</bean>
	
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	    <property name="jobDetail" ref="jobDetail" />
	    <!-- 当时间的格式是0 0 0 的时候执行 -->
	    <property name="cronExpression" value="0 0 0 * * ?" />
	</bean>
	
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	        <list>
	            <ref bean="cronTrigger" />
	        </list>
	    </property>
	</bean>
	
	<!-- 配置默认的Web安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    	<!-- 缓存管理器 -->
        <property name="cacheManager" ref="cacheManager"/>
        <!-- realm用来访问安全数据 -->
        <property name="realm" ref="jfRealm"/>
    </bean>

    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- 采用ecache配置文件的方式配置缓存管理器 -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!-- 配置Realm -->
    <bean id="jfRealm" class="com.atguigu.jf.console.common.realm.JfRealm">
    	<property name="credentialsMatcher" >
    		<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    			<!-- 指定加密算法 -->
				<property name="hashAlgorithmName" value="MD5" />
				<!-- 加密的次数 -->
				<property name="hashIterations" value="1024" />
    		</bean>
    	</property>
    </bean>

    <!-- 配置管理spring中shiro对象的生命周期 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- 开启shiro的注解
    	注意：只有在lifecycleBeanProcessor开启后才能使注解生效
     -->  
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    	<!-- 引用安全管理器 -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 用来登录的链接 -->
        <property name="loginUrl" value="/login.jsp"/>
        <!-- 如果没有权限，将跳转的连接 -->
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <property name="filterChainDefinitions">
            <value>
            	/doLogout = logout
            	/logincontroller/** = anon
            	/res/** = anon
            	/theme/** = anon
                /** = authc
            </value>
        </property>
    </bean>
</beans>
